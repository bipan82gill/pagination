{"version":3,"sources":["components/Posts.js","components/Pagination.js","App.js","reportWebVitals.js","index.js"],"names":["Posts","posts","loading","className","map","post","title","id","Pagination","postsPerPage","totalPosts","paginate","pageNumbers","i","Math","ceil","push","number","onClick","href","App","useState","setPosts","setLoading","currentPage","setCurrentPage","useEffect","a","axios","get","res","data","fetchPosts","indexOfLastPost","indexOfFirstPost","currentPosts","slice","length","pageNumber","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAgBeA,EAdD,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,MACZ,OADgC,EAAbC,QAER,+CAGR,oBAAIC,UAAW,kBAAf,SACKF,EAAMG,KAAI,SAAAC,GAAI,OACX,oBAAmBF,UAAU,kBAA7B,SACKE,EAAKC,OADAD,EAAKE,UCcfC,EArBI,SAAC,GAEhB,IAF0D,IAAxCC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,SACtCC,EAAc,GACZC,EAAE,EAAGA,GAAGC,KAAKC,KAAKL,EAAWD,GAAeI,IAChDD,EAAYI,KAAKH,GAGrB,OACI,8BACI,oBAAIV,UAAY,aAAhB,SACKS,EAAYR,KAAI,SAAAa,GAAM,OACnB,oBAAiBd,UAAU,YAA3B,SACI,mBAAGe,QAAS,kBAAIP,EAASM,IAAQE,KAAK,IAAIhB,UAAU,YAApD,SACKc,KAFAA,W,MCyBdG,MA/Bf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNpB,EADM,KACCqB,EADD,OAEmBD,oBAAS,GAF5B,mBAELnB,EAFK,KAEIqB,EAFJ,OAGyBF,mBAAS,GAHlC,mBAGNG,EAHM,KAGOC,EAHP,OAIWJ,mBAAS,IAAzBZ,EAJK,oBAKZiB,qBAAU,YACQ,uCAAG,4BAAAC,EAAA,6DACjBJ,GAAW,GADM,SAECK,IAAMC,IAAI,8CAFX,OAEXC,EAFW,OAGjBR,EAASQ,EAAIC,MACbR,GAAW,GAJM,2CAAH,qDAMhBS,KACA,IAEF,IAAMC,EAAkBT,EAAcf,EAChCyB,EAAmBD,EAAkBxB,EACrC0B,EAAelC,EAAMmC,MAAMF,EAAkBD,GAKpD,OACE,sBAAK9B,UAAU,YAAf,UACC,oBAAIA,UAAU,oBAAd,qBACA,cAAC,EAAD,CAAOF,MAAOkC,EAAcjC,QAASA,IACtC,cAAC,EAAD,CAAYO,aAAcA,EAAcC,WAAYT,EAAMoC,OAAQ1B,SANlD,SAAC2B,GAAD,OAAgBb,EAAea,UCdpCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.aaac4b5d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Posts = ({posts, loading}) => {\r\n    if(loading){\r\n        return <h2>Loading .....</h2>;\r\n    }\r\n    return (\r\n       <ul className ='list-group mb-4'>\r\n           {posts.map(post=>(\r\n               <li key ={post.id} className='list-group-item'>\r\n                   {post.title}\r\n               </li>\r\n           ))}\r\n       </ul>\r\n    )\r\n}\r\nexport default Posts;\r\n","import React from 'react'\r\n\r\nconst Pagination = ({ postsPerPage, totalPosts, paginate}) =>{\r\n    const pageNumbers = [];\r\n    for(let i=1; i<=Math.ceil(totalPosts/postsPerPage); i++){\r\n        pageNumbers.push(i);\r\n    }\r\n\r\n    return (\r\n        <nav>\r\n            <ul className = 'pagination'>\r\n                {pageNumbers.map(number =>(\r\n                    <li key={number} className='page-item'>\r\n                        <a onClick={()=>paginate(number)}href='#' className='page-link'>\r\n                            {number}\r\n                        </a>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Pagination\r\n\r\n\r\n","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport Posts from './components/Posts';\nimport Pagination from './components/Pagination';\nimport './App.css';\n\nfunction App() {\n  const [posts, setPosts] = useState([]);\n  const [ loading, setLoading]  = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [ postsPerPage] = useState(10);\n   useEffect(()=>{\n     const fetchPosts = async () => {\n       setLoading(true);\n       const res = await axios.get('https://jsonplaceholder.typicode.com/posts');\n       setPosts(res.data);\n       setLoading(false);\n     }\n     fetchPosts();\n   },[]);\n   // get current posts \n   const indexOfLastPost = currentPage * postsPerPage;\n   const indexOfFirstPost = indexOfLastPost - postsPerPage;\n   const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\n   \n   // change page \n   const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n  return (\n    <div className=\"container\">\n     <h1 className='text-primary mb-3'>My Blog</h1>\n     <Posts posts={currentPosts} loading={loading}/>\n    <Pagination postsPerPage={postsPerPage} totalPosts={posts.length} paginate={paginate} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}